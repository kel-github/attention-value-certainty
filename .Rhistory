points(x = c(1:4), rc_after, type = "l", lwd = 3, lty = 4)
cb_change = cb_after - cb_before
names(cb_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(cb_change)
rc_change = rc_after - rc_before
rc_change = rc_after - rc_before
names(rc_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(rc_change)
? legend
legend("topright", legend = c("off DBS", "on DBS"), lty = c(1,4), lwd = 3)
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3, ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))))
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4)
### PLOT 2 - STRIATUM CODES REWARD
rc_before = reward - reward_impairment + predict
rc_after = reward + predict
tmp = scale(c(rc_before, rc_after), center = TRUE, scale = TRUE)
rc_before = tmp[c(1:4)]
rc_after = tmp[c(5:8)]
plot(x=c(1:4), rc_before, type = "l", lwd = 3, ylim = c(min(c(rc_before,rc_after)), max(c(rc_before,rc_after))))
points(x = c(1:4), rc_after, type = "l", lwd = 3, lty = 4)
legend("topright", legend = c("off DBS", "on DBS"), lty = c(1,4), lwd = 3)
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance")
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F)
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4)
axis(side = 1)
axis(side = 2)
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F, col = "dodgerblue")
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4)
axis(side = 1)
axis(side = 2)
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F, col = "dodgerblue4")
library(wesanderson)
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F, col = wes_palette("Cavalcanti")[4])
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4, col = wes_palette("Cavalcanti")[5])
axis(side = 1)
axis(side = 2)
plot(x=c(1:4), rc_before, type = "l", lwd = 3,
ylim = c(min(c(rc_before,rc_after)), max(c(rc_before,rc_after))),
col =  wes_palette("Cavalcanti")[5])
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F, col = wes_palette("Cavalcanti")[4])
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4, col = wes_palette("Cavalcanti")[5])
axis(side = 1)
axis(side = 2)
### PLOT 2 - STRIATUM CODES REWARD
rc_before = reward - reward_impairment + predict
rc_after = reward + predict
tmp = scale(c(rc_before, rc_after), center = TRUE, scale = TRUE)
rc_before = tmp[c(1:4)]
rc_after = tmp[c(5:8)]
plot(x=c(1:4), rc_before, type = "l", lwd = 3,
ylim = c(min(c(rc_before,rc_after)), max(c(rc_before,rc_after))),
col =  wes_palette("Cavalcanti")[4])
points(x = c(1:4), rc_after, type = "l", lwd = 3, lty = 4,  col =  wes_palette("Cavalcanti")[5])
legend("topright", legend = c("off DBS", "on DBS"), lty = c(1,4), lwd = 3,
col = c(wes_palette("Cavalcanti")[4], wes_palette("Cavalcanti")[5]))
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F, col = wes_palette("Cavalcanti")[4])
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4, col = wes_palette("Cavalcanti")[5])
axis(side = 1)
axis(side = 2)
### PLOT 2 - STRIATUM CODES REWARD
rc_before = reward - reward_impairment + predict
rc_after = reward + predict
tmp = scale(c(rc_before, rc_after), center = TRUE, scale = TRUE)
rc_before = tmp[c(1:4)]
rc_after = tmp[c(5:8)]
plot(x=c(1:4), rc_before, type = "l", lwd = 3,
ylim = c(min(c(rc_before,rc_after)), max(c(rc_before,rc_after))),
col =  wes_palette("Cavalcanti")[4], axes = F)
points(x = c(1:4), rc_after, type = "l", lwd = 3, lty = 4,
col =  wes_palette("Cavalcanti")[5])
axis(side = 2)
legend("topright", legend = c("off DBS", "on DBS"), lty = c(1,4), lwd = 3,
col = c(wes_palette("Cavalcanti")[4], wes_palette("Cavalcanti")[5]))
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F, col = wes_palette("Cavalcanti")[4])
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4, col = wes_palette("Cavalcanti")[5])
axis(side = 1)
axis(side = 2)
### PLOT 2 - STRIATUM CODES REWARD
rc_before = reward - reward_impairment + predict
rc_after = reward + predict
tmp = scale(c(rc_before, rc_after), center = TRUE, scale = TRUE)
rc_before = tmp[c(1:4)]
rc_after = tmp[c(5:8)]
plot(x=c(1:4), rc_before, type = "l", lwd = 3,
ylim = c(min(c(rc_before,rc_after)), max(c(rc_before,rc_after))),
col =  wes_palette("Cavalcanti")[4], axes = F)
points(x = c(1:4), rc_after, type = "l", lwd = 3, lty = 4,
col =  wes_palette("Cavalcanti")[5])
axis(side = 1)
legend("topright", legend = c("off DBS", "on DBS"), lty = c(1,4), lwd = 3,
col = c(wes_palette("Cavalcanti")[4], wes_palette("Cavalcanti")[5]))
#### PLOT 3 - #1 CHANGE
library(wesanderson)
reward = c(10, 5, 10, 5)
predict = c(10, 10, 5, 5)
reward_impairment = c(8, 4, 8, 4)
predict_impairment = c(8, 8, 4, 4)
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F, col = wes_palette("Cavalcanti")[4])
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4, col = wes_palette("Cavalcanti")[5])
axis(side = 1)
axis(side = 2)
### PLOT 2 - STRIATUM CODES REWARD
rc_before = reward - reward_impairment + predict
rc_after = reward + predict
tmp = scale(c(rc_before, rc_after), center = TRUE, scale = TRUE)
rc_before = tmp[c(1:4)]
rc_after = tmp[c(5:8)]
plot(x=c(1:4), rc_before, type = "l", lwd = 3,
ylim = c(min(c(rc_before,rc_after)), max(c(rc_before,rc_after))),
col =  wes_palette("Cavalcanti")[4], axes = F)
points(x = c(1:4), rc_after, type = "l", lwd = 3, lty = 4,
col =  wes_palette("Cavalcanti")[5])
axis(side = 1)
legend("topright", legend = c("off DBS", "on DBS"), lty = c(1,4), lwd = 3,
col = c(wes_palette("Cavalcanti")[4], wes_palette("Cavalcanti")[5]),
bty = "n")
cb_change = cb_after - cb_before
names(cb_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(cb_change, ylab = "on DBS - off DBS", col = wes_palette("Cavalcanti")[1])
#### PLOT 4 - #2 CHANGE
rc_change = rc_after - rc_before
names(rc_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(rc_change, col = wes_palette("Cavalcanti")[1])
#### PLOT 3 - #1 CHANGE
cb_change = cb_after - cb_before
names(cb_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(cb_change, ylab = "on DBS - off DBS", col = wes_palette("Cavalcanti")[1])
#### PLOT 4 - #2 CHANGE
rc_change = rc_after - rc_before
names(rc_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(rc_change, col = wes_palette("Cavalcanti")[2])
library(wesanderson)
reward = c(10, 5, 10, 5)
predict = c(10, 10, 5, 5)
reward_impairment = c(8, 4, 8, 4)
predict_impairment = c(8, 8, 4, 4)
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F, col = wes_palette("Cavalcanti")[4])
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4, col = wes_palette("Cavalcanti")[5])
axis(side = 1)
axis(side = 2)
### PLOT 2 - STRIATUM CODES REWARD
rc_before = reward - reward_impairment + predict
rc_after = reward + predict
tmp = scale(c(rc_before, rc_after), center = TRUE, scale = TRUE)
rc_before = tmp[c(1:4)]
rc_after = tmp[c(5:8)]
plot(x=c(1:4), rc_before, type = "l", lwd = 3,
ylim = c(min(c(rc_before,rc_after)), max(c(rc_before,rc_after))),
col =  wes_palette("Cavalcanti")[4], axes = F)
points(x = c(1:4), rc_after, type = "l", lwd = 3, lty = 4,
col =  wes_palette("Cavalcanti")[5])
axis(side = 1)
legend("topright", legend = c("off DBS", "on DBS"), lty = c(1,4), lwd = 3,
col = c(wes_palette("Cavalcanti")[4], wes_palette("Cavalcanti")[5]),
bty = "n")
#### PLOT 3 - #1 CHANGE
cb_change = cb_after - cb_before
names(cb_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(cb_change, ylab = "on DBS - off DBS", col = wes_palette("Cavalcanti")[1])
#### PLOT 4 - #2 CHANGE
rc_change = rc_after - rc_before
names(rc_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(rc_change, col = wes_palette("Cavalcanti")[2])
? barplot
barplot(cb_change, ylab = "on DBS - off DBS", col = wes_palette("Cavalcanti")[1],
width = c(0.5, 0.5, 0.5, 0.5))
barplot(cb_change, ylab = "on DBS - off DBS", col = wes_palette("Cavalcanti")[1],
width = c(0.25, 0.25, 0.25, 0.25))
barplot(cb_change, ylab = "on DBS - off DBS", col = wes_palette("Cavalcanti")[1],
width = c(0.25, 0.25, 0.25, 0.25), xlim = c(0.5, 4.5))
barplot(cb_change, ylab = "on DBS - off DBS", col = wes_palette("Cavalcanti")[1],
width = c(0.5, 0.5, 0.5, 0.5), xlim = c(0.5, 4.5))
barplot(cb_change, ylab = "on DBS - off DBS", col = wes_palette("Cavalcanti")[1],
width = c(0.5, 0.5, 0.5, 0.5), xlim = c(-0.5, 4.5))
t = seq(0, 1, 0.01)
#### PLOT 5 - MODEL EVIDENCE OVER TIME
t = seq(0, 1, 0.01)
evs = t/(1+abs(t))
plot(t, evs, type = "l")
t = seq(-1, 1, 0.01)
evs = t/(1+abs(t))
plot(t, evs, type = "l")
evs = t/sqrt(1+t^2))
evs = t/sqrt(1+t^2)
plot(t, evs, type = "l")
par(mfrow = c(1,1))
t = seq(-1, 1, 0.01)
evs = t/sqrt(1+t^2)
plot(t, evs, type = "l")
par(mfrow = c(1,1))
t = seq(-1, 1, 0.01)
evs = t/sqrt(1+t^2)
plot(t, evs, type = "l", axes = F, xlab = "time", ylab = "Model Evidence")
abline(v = -0.8, lty = 5, lwd = 2, col = "darkgray")
plot(t, evs, type = "l", lwd = 3, col = "darkblue", axes = F, xlab = "Time", ylab = "Model Evidence")
abline(v = -0.8, lty = 5, lwd = 2, col = "darkgray")
axis(side = 1)
axis(side = 2)
library(wesanderson)
reward = c(10, 5, 10, 5)
predict = c(15, 15, 5, 5)
reward_impairment = c(8, 4, 8, 4)
predict_impairment = c(12, 12, 4, 4)
par(mfrow = c(2,2))
cb_before = reward-reward_impairment + predict-predict_impairment
cb_after = reward + predict
tmp = scale(c(cb_before, cb_after), center = TRUE, scale = TRUE)
cb_before = tmp[c(1:4)]
cb_after = tmp[c(5:8)]
plot(x=c(1:4), cb_before, type = "l", lwd = 3,
ylim = c(min(c(cb_before,cb_after)), max(c(cb_before,cb_after))),
ylab = "Performance", axes = F, col = wes_palette("Cavalcanti")[4])
points(x=c(1:4), cb_after, type = "l", lwd = 3, lty = 4, col = wes_palette("Cavalcanti")[5])
axis(side = 1)
axis(side = 2)
### PLOT 2 - STRIATUM CODES REWARD
rc_before = reward - reward_impairment + predict
rc_after = reward + predict
tmp = scale(c(rc_before, rc_after), center = TRUE, scale = TRUE)
rc_before = tmp[c(1:4)]
rc_after = tmp[c(5:8)]
plot(x=c(1:4), rc_before, type = "l", lwd = 3,
ylim = c(min(c(rc_before,rc_after)), max(c(rc_before,rc_after))),
col =  wes_palette("Cavalcanti")[4], axes = F)
points(x = c(1:4), rc_after, type = "l", lwd = 3, lty = 4,
col =  wes_palette("Cavalcanti")[5])
axis(side = 1)
legend("topright", legend = c("off DBS", "on DBS"), lty = c(1,4), lwd = 3,
col = c(wes_palette("Cavalcanti")[4], wes_palette("Cavalcanti")[5]),
bty = "n")
#### PLOT 3 - #1 CHANGE
cb_change = cb_after - cb_before
names(cb_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(cb_change, ylab = "on DBS - off DBS", col = wes_palette("Cavalcanti")[1],
width = c(0.5, 0.5, 0.5, 0.5), xlim = c(-0.5, 4.5))
#### PLOT 4 - #2 CHANGE
rc_change = rc_after - rc_before
names(rc_change) = c("R .8/.2", "NR .8/.2", "R .5/.5", "NR .5/.5")
barplot(rc_change, col = wes_palette("Cavalcanti")[2])
t = seq(0, 1, .01)
alpha_power = c(rep(5, times = 40), rep(10, times = 30), rep(5, times = 31))
alpha =  alpha_power*sin(2*pi*10*t)
yalpha_high = 10*sin(2*pi*10*t + 90)
gam_power = rep(2, times = 101)
ygamma = gam_power*sin(2*pi*50*t+45)
plot(t, alpha, type = "l", lwd = 4, col = "tan2", axes = F, ylim = c(-50,50))
plot(t, ygamma, type = "l", lwd = 2, col = "steelblue1", axes = F, ylim = c(-50,50))
setwd('..')
getwd()
setwd("~/")
setwd("~/Dropbox/BHAMPROJECTS/RelValue_StudyProgramme/PROJECT_REPOSITORIES/ADDBIAS_REPOS")
rm(list = ls())
setwd("~/Dropbox/BHAMPROJECTS/RelValue_StudyProgramme/PROJECT_REPOSITORIES/ADDBIAS_REPOS")
load("EXP1/ANALYSIS/EXP1_ANALYSIS_MIXDMDLS_BIAS.R")
load("/EXP1/ANALYSIS/EXP1_ANALYSIS_MIXDMDLS_BIAS.R")
getwd()
load("EXP1/ANALYSIS/EXP1_ANALYSIS_MIXDMDLS_BIAS.R")
load("/EXP1/ANALYSIS/EXP1_ANALYSIS_MIXDMDLS_BIAS.R")
load("/EXP1/ANALYSIS/EXP1_ANALYSIS_MIXDMDLS_BIAS.R")
load("EXP1/ANALYSIS/EXP1_ANALYSIS_MIXDMDLS_BIAS.R")
rt.bf.for.plot
rt.bf.for.plot = data.frame(  BF = c(3.814597, 4.84, 5.189638, 13.53112, 17.23548),
upper = c(3.814597 + (3.814597*.0015), 4.83534 + ( 4.83534*.004 ), 5.189638 + (5.189638*.0053), 13.53112 + (13.53112 * .0057), 17.23548 + (17.23548*.0072)),
lower = c(3.814597 - (3.814597*.0015),4.83534 - ( 4.83534*.004 ), 5.189638 - (5.189638*.0053), 13.53112 - (13.53112 * .0057), 17.23548 - (17.23548*.0072)),
names = c( "v*c + c*va", "v + va", "v*c + v*va", "v + c + va", "v*c + v*va + c*va" ))
rt.bf6
rt.top
rt.all.mods
rt.top = head(rt.all.mods)
rt.bf2 = rt.top[1]/rt.top[2] # valid + info_gain + valid:info_gain + r1 + info_gain:r1 + sub
rt.bf3 = rt.top[1]/rt.top[3] # valid + r1 + sub
rt.bf4 = rt.top[1]/rt.top[4] # valid + info_gain + valid:info_gain + r1 + valid:r1 + sub
rt.bf5 = rt.top[1]/rt.top[5] # valid + info_gain + r1 + sub
rt.bf6 = rt.top[1]/rt.top[6] # valid + info_gain + valid:info_gain + r1 + valid:r1 + info_gain:r1 + sub
acc.top
acc.top = head(acc.all.mods) # win = valid + r1 + sub
acc.bf2 = acc.top[1]/acc.top[2] # valid + info_gain + r1 + sub
acc.bf3 = acc.top[1]/acc.top[3] # valid + info_gain + valid:info_gain + r1 + sub
acc.bf4 = acc.top[1]/acc.top[4] # valid + r1 + valid:r1 + sub
acc.bf5 = acc.top[1]/acc.top[5] # valid + info_gain + r1 + info_gain:r1 + sub
acc.bf6 = acc.top[1]/acc.top[6] # valid + info_gain + valid:info_gain + r1 + info_gain:r1 + sub
acc.bf.for.plot = data.frame(  BF = c(2.57, 3.187716, 5.694131, 8.452145 , 9.173843),
upper = c(2.57 + (2.57*.0068), 3.187716 + ( 3.187716*.0078 ), 5.694131 + (5.694131*.0066), 8.452145 + (8.452145 * .0086), 9.173843 + (9.173843*.0095)),
lower = c(2.57 - (2.57*.0068), 3.187716 - ( 3.187716*.0078 ), 5.694131 - (5.694131*.0066), 8.452145 - (8.452145 * .0086), 9.173843 - (9.173843*.0095)),
names = c( "v + c + va", "v*c + va", "v*va", "v + c*va", "v*c + c*va"))
e1.rt.a1
data
sum.dat.all
sum.dat.all.plot
sum.dat.sub
sum.dat.all.gmu
sum.dat.err
sum.dat.err
sum.dat.cis
acc.dat.all
acc.dat.sub
acc.dat.gmu
acc.dat.plot
acc.dat.err
acc.dat.cis
sum.dat.all
rt.full
rt.valid
rt.valinf
rt.valinf = lmer( mu ~ valid + info_gain + r1 + info_gain:valid  +  (1|sub), REML = FALSE, data = sum.dat.all)
library(wesanderson)
library(lm.beta)
library(lme4)
library(BayesFactor)
library(plyr)
rt.valid
rt.valinf = lmer( mu ~ valid + info_gain + r1 + info_gain:valid  +  (1|sub), REML = FALSE, data = sum.dat.all)
rt.infgain = lmer( mu ~ valid + info_gain + r1 + (1|sub), REML = FALSE, data = sum.dat.all)
rt.meinfgain = lmer( mu ~ valid + r1 + (1|sub), REML = FALSE, data = sum.dat.all)
rt.rew.int = lmer( mu ~ valid + info_gain + info_gain:valid + (1|sub), REML = FALSE, data = sum.dat.all)
e1.rt.a1 = anova(rt.full, rt.valid) # **** me valid
e1.rt.a2 = anova(rt.full, rt.valinf )
e1.rt.a3 = anova( rt.valinf, rt.infgain) ### info * valid
e1.rt.a4 = anova(rt.infgain, rt.meinfgain)
e1.rt.a5 = anova(rt.valinf, rt.rew.int) # **** me value
e1.rt.ps = c(2.2e-16, 0.3409, 0.002196, 0.1387, 2.977e-12  )
e1.rt.p.adj = p.adjust(e1.rt.ps, method = "fdr")
e1.rt.p.win = which(e1.rt.p.adj < .05)
summary(rt.full)
acc.dat.all
acc.full
acc.full = lmer( acc ~ valid + info_gain + r1 + info_gain:valid + info_gain:r1 + (1|sub), REML = FALSE, data = acc.dat.all)
acc.valid = lmer( acc ~ info_gain + r1 + info_gain:valid + info_gain:r1 + (1|sub), REML = FALSE, data = acc.dat.all)
acc.valinf = lmer( acc ~ valid + info_gain + r1 + info_gain:valid  +  (1|sub), REML = FALSE, data = acc.dat.all)
acc.infgain = lmer( acc ~ valid + info_gain + r1 + (1|sub), REML = FALSE, data = acc.dat.all)
acc.meinfgain = lmer( acc ~ valid + r1 + (1|sub), REML = FALSE, data = acc.dat.all)
acc.rew.int = lmer( acc ~ valid + info_gain + info_gain:valid + (1|sub), REML = FALSE, data = acc.dat.all)
e1.acc.a1 = anova( acc.full, acc.valid) # ********
e1.acc.a2 = anova(acc.full, acc.valinf )
e1.acc.a3 = anova( acc.valinf, acc.infgain)
e1.acc.a4 = anova( acc.infgain, acc.meinfgain)
e1.acc.a5 = anova( acc.valinf, acc.rew.int) # ******
e1.acc.ps = c( 8.29e-14, 0.3209, 0.07941, 0.1635, 0.0004885)
e1.acc.p.adj = p.adjust(e1.acc.ps, method = "fdr")
e1.acc.p.win = which(e1.acc.p.adj < .05)
summary( acc.full )
acc.top
acc.bf2
acc.bf6
acc.bf.for.plot
win.mod.rt
win.mod.rt = lm( mu ~ valid + info_gain + valid:info_gain + r1, data = sum.dat.all) # top model
sum.dat.all.plot$info_gain = rep(xs, each = 4)
sum.dat.all.plot$r1 = rep(c(50,1), each = 2, times = 5)
sum.dat.all.plot$predict = predict( win.mod.rt, sum.dat.all.plot )
win.mod.acc = lm( acc ~ valid + r1, data = acc.dat.all) # top model
acc.dat.plot$info_gain = rep(xs, each = 4)
acc.dat.plot$r1 = rep(c(50,1), each = 2, times = 5)
acc.dat.plot$predict = predict( win.mod.acc, acc.dat.plot)
save.image("EXP1/ANALYSIS/EXP1_ANALYSIS_MIXDMDLS_BIAS.R")
acc.dat.plot
rm(list=ls())
library(wesanderson)
library(lm.beta)
library(lme4)
library(BayesFactor)
library(plyr)
getwd()
source("EXP2/ANALYSIS/trim_functions.R")
load("EXP2/ANALYSIS/EXP2_ANALYSIS_MIXDMDLS_BIAS.R")
data
sum.dat.all
sum.dat.all.plot
sum.dat.sub
sum.dat.all.gmu
sum.dat.sub
sum.dat.all.gmu
sum.dat.err
sum.dat.cis
acc.dat.all
acc.dat.sub
acc.dat.gmu
acc.dat.plot
acc.dat.err
acc.dat.cis
sum.dat.all
rt.full
rt.d3way
rt.dinf.gain
rt.dinf.r1
rt.dinf.val
rt.dme.inf
rt.dval
rt.dr1.rewcond
rt.drewcond
rt.drewr1
e2.rt.a1
e2.rt.a9
e2.rt.win
rt.all.mods
rt.all.mods
rt.top
rt.bf6
rt.bf.for.plot
acc.report
acc.report = lmer( acc ~ valid*info_gain + rew_cond + r1 + (1|sub), REML = FALSE, data = acc.dat.all)
acc.dat.all
acc.full
acc.dval
acc.dr1.rewcond
acc.drewcond
acc.drewr1
e2.acc.p
e2.acc.p.win
acc.top
acc.bf6
acc.bf.for.plot
acc.bf8
sum.dat.all.plot
acc.dat.plot
rm(list = ls())
getwd()
packrat::init(getwd())
getwd()
library(mvtnorm)
mtvnorm
packrat::init(getwd()) # preserve package versions (start R from the project directory and
lm.beta
library(lm.beta)
lm.beta
packrat::init(getwd()) # preserve package versions (start R from the project directory and
