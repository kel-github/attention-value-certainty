# this function assumes that the behavioural data is stored in the below folder
behav.dat        <- read.csv(fname)
behav.dat$sub    <- as.factor(behav.dat$sub)
behav.dat$Group  <- as.factor(behav.dat$Group)
levels(behav.dat$Group) <- c("train","control")
View(behav.dat)
names(behav.dat)
get.behav.data <- function(fname){
# this function assumes that the behavioural data is stored in the below folder
behav.dat        <- read.csv(fname)
behav.dat$sub    <- as.factor(behav.dat$sub)
behav.dat$Group  <- as.factor(behav.dat$Group)
levels(behav.dat$Group) <- c("train","control")
behav.dat = behav.dat[,c(1:2, 29, 32, 27, 28, 33, 34)]
behav.dat
}
behav.dat = get.behav.data('../s1s2_behavioural_data/final_data_cleaned_250ms_to_3_sdevs_1331_recode.csv')
data = inner_join(params, behav.dat, by=c("sub"))
get.behav.data <- function(fname){
# this function assumes that the behavioural data is stored in the below folder
behav.dat        <- read.csv(fname)
behav.dat$sub    <- as.factor(behav.dat$sub)
behav.dat$Group  <- as.factor(behav.dat$Group)
levels(behav.dat$Group) <- c("train","control")
behav.dat = behav.dat[,c(1:2, 29, 32, 27, 28, 33, 34)]
behav.dat
}
behav.dat = get.behav.data('../s1s2_behavioural_data/final_data_cleaned_250ms_to_3_sdevs_1331_recode.csv')
data = inner_join(params, behav.dat, by=c("sub"))
View(data)
draw.scatters(data[data$grp=="train", ], "Pre_VS")
get.b.data <- function(fname){
dat <- read.csv(fname, header = TRUE)
dat$sub = as.factor(dat$sub)
dat$grp = as.factor(dat$grp)
levels(dat$grp) = c("train", "control")
# assign parameter name
dat$con = rep(c("lipl_to_lput", "lput_to_lipl", "lput_to_smfc", "smfc_to_lipl", "smfc_to_lput"), times = length(levels(dat$sub)))
dat$con = as.factor(dat$con)
dat
}
fname = "~/Dropbox/QBI/mult-conn/multi-practice-repository/s1s2_mt_practice_dcm_analysis_outdata/behav_correlations/sub_b_params.csv"
params = get.b.data(fname)
get.behav.data <- function(fname){
# this function assumes that the behavioural data is stored in the below folder
behav.dat        <- read.csv(fname)
behav.dat$sub    <- as.factor(behav.dat$sub)
behav.dat$Group  <- as.factor(behav.dat$Group)
levels(behav.dat$Group) <- c("train","control")
behav.dat = behav.dat[,c(1:2, 29, 32, 27, 28, 33, 34)]
behav.dat
}
behav.dat = get.behav.data('../s1s2_behavioural_data/final_data_cleaned_250ms_to_3_sdevs_1331_recode.csv')
data = inner_join(params, behav.dat, by=c("sub"))
#### basic plot function to plot rts by parameter
draw.scatters <- function(data, dv){
# enter the dataframe and the behavioural DV of choice to yield scatter plot of b_param by    dv
scat = ggplot(data, aes_string(x="b", y=dv, col="con")) +
geom_point() +
facet_wrap(~con) +
geom_smooth(method=lm) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values=wesanderson::wes_palette("Rushmore"))
scat
}
get.cors <- function(data, iv, dv, method){
# pass in data frame, iv, dv, and method as tests to get outputs
x = data$b[data$con == iv]
y = data[data$con == iv, dv]
test = cor.test(x, y, method=method)
test
}
draw.scatters(data[data$grp=="train", ], "Pre_VS")
t.data = data[data$grp=="train", ]
draw.scatters(t.data, "Pre_VS")
draw.scatters(data[data$grp=="train", ], "Mean_DC_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="train", ], dv = "Mean_DC_Diff", method="spearman")
draw.scatters(data[data$grp=="train", ], "Mean_DC_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="train", ], dv = "Mean_DC_Diff", method="pearson")
draw.scatters(data[data$grp=="control", ], "Mean_DC_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="control", ], dv = "Mean_DC_Diff", method="pearson")
lapply(unique(data$con), get.cors, data = data[data$grp=="control", ], dv = "Mean_DC_Diff", method="spearman")
lapply(unique(data$con), get.cors, data = data[data$grp=="control", ], dv = "Sum_Diff", method="spearman")
draw.scatters(data[data$grp=="train", ], "VM_DC_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="train", ], dv = "Mean_DC_Diff", method="pearson")
draw.scatters(data[data$grp=="train", ], "VM_DC_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="train", ], dv = "Mean_DC_Diff", method="spearman")
draw.scatters(data[data$grp=="train", ], "VM_DC_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="train", ], dv = "VM_DC_Diff", method="spearman")
train_VM_DC_Diff_ps = c(0.8127, 0.4594, 0.02171, 0.5084, 0.6132)
p.adjust(train_VM_DC_Diff_ps, method="fdr")
draw.scatters(data[data$grp=="control", ], "VM_DC_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="control", ], dv = "VM_DC_Diff", method="spearman")
draw.scatters(data[data$grp=="train", ], "AM_DC_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="train", ], dv = "AM_DC_Diff", method="spearman")
lapply(unique(data$con), get.cors, data = data[data$grp=="train", ], dv = "AM_DC_Diff", method="pearson")
draw.scatters(data[data$grp=="control", ], "AM_DC_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="control", ], dv = "AM_DC_Diff", method="spearman")
lapply(unique(data$con), get.cors, data = data[data$grp=="control", ], dv = "AM_DC_Diff", method="pearson")
draw.scatters(data[data$grp=="train", ], "Sum_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="train", ], dv = "Sum_Diff", method="spearman")
draw.scatters(data[data$grp=="control", ], "Sum_Diff")
lapply(unique(data$con), get.cors, data = data[data$grp=="control", ], dv = "Sum_Diff", method="spearman")
lm(data$Sum_Diff~data$b)
summary(lm(data$Sum_Diff~data$b))
draw.scatters.grp <- function(data, dv){
# enter the dataframe and the behavioural DV of choice to yield scatter plot of b_param by    dv
scat = ggplot(data, aes_string(x="b", y=dv, col="grp")) +
geom_point() +
facet_wrap(~con) +
geom_smooth(method=lm) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values=wesanderson::wes_palette("Rushmore"))
scat
}
draw.scatters.grp(data, "VM_DC_Diff")
draw.scatters.grp <- function(data, dv){
# enter the dataframe and the behavioural DV of choice to yield scatter plot of b_param by    dv
scat = ggplot(data, aes_string(x="b", y=dv, col="grp")) +
geom_point() +
facet_wrap(~con) +
geom_smooth(method=lm) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
scat
}
draw.scatters.grp(data, "VM_DC_Diff")
draw.scatters.grp <- function(data, dv){
# enter the dataframe and the behavioural DV of choice to yield scatter plot of b_param by    dv
scat = ggplot(data, aes_string(x="b", y=dv, col="grp")) +
geom_point() +
facet_wrap(~con) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
scat
}
draw.scatters.grp(data, "VM_DC_Diff")
lapply(unique(data$con), get.cors, data = data, dv = "VM_DC_Diff", method="spearman")
draw.scatters.grp <- function(data, dv){
# enter the dataframe and the behavioural DV of choice to yield scatter plot of b_param by    dv
scat = ggplot(data, aes_string(x="b", y=dv, col="grp")) +
geom_point() +
facet_wrap(~con) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())+
scale_color_manual(values=wesanderson::wes_palette("Rushmore")[c(1:2)])
scat
}
draw.scatters.grp(data, "VM_DC_Diff")
wesanderson::wes_palette("Rushmore")[c(1:2)]
draw.scatters.grp(data, "VM_DC_Diff")
lapply(unique(data$con), get.cors, data = data, dv = "VM_DC_Diff", method="spearman")
draw.scatters <- function(data, dv){
# enter the dataframe and the behavioural DV of choice to yield scatter plot of b_param by    dv
scat = ggplot(data, aes_string(x="b", y=dv, col="con")) +
geom_point() +
facet_wrap(~con) +
geom_smooth(method=lm) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
scat
}
draw.scatters.grp <- function(data, dv){
# enter the dataframe and the behavioural DV of choice to yield scatter plot of b_param by    dv
scat = ggplot(data, aes_string(x="b", y=dv, col="grp")) +
geom_point() +
facet_wrap(~con) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
scat
}
draw.scatters.grp(data, "VM_DC_Diff")
lapply(unique(data$con), get.cors, data = data, dv = "VM_DC_Diff", method="spearman")
Grp_VM_DC_Diff_ps = c(0.04128, 0.5992, 0.01804, 0.38, 0.6864)
p.adjust(Grp_VM_DC_Diff_ps, method="fdr")
draw.scatters.grp(data, "AM_DC_Diff")
lapply(unique(data$con), get.cors, data = data, dv = "AM_DC_Diff", method="spearman")
draw.scatters.grp(data, "Sum_Diff")
lapply(unique(data$con), get.cors, data = data, dv = "Sum_Diff", method="spearman")
draw.scatters.grp(data, "Sum_Diff")
lapply(unique(data$con), get.cors, data = data, dv = "Sum_Diff", method="pearson")
draw.scatters.grp(data, "Sum_Diff")
lapply(unique(data$con), get.cors, data = data, dv = "Sum_Diff", method="spearman")
Grp_Sum_DC_Diff_ps = c(0.00785, 0.7909, 0.3688, 0.1733, 0.9716)
p.adjust(Grp_Sum_DC_Diff_ps, method="fdr")
get.cors
train.cor = get.cors(data[data$grp=="train", ], iv = "lipl_to_lput", dv = "Sum_Diff", method="spearman")
ctrl.cor = get.cors(data[data$grp=="control", ], iv = "lipl_to_lput", dv = "Sum_Diff", method="spearman")
ctrl.cor
train.cor
install.packages("psych")
library(psych)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(psych)
train.cor
ctrl.cor
train.cor = get.cors(data[data$grp=="train", ], iv = "lipl_to_lput", dv = "Sum_Diff", method="pearson")
train.cor
ctrl.cor = get.cors(data[data$grp=="control", ], iv = "lipl_to_lput", dv = "Sum_Diff", method="pearson")
ctrl.cor
cor.test.between = paired.r(-0.178045 , -0.1698871, 45, 47, twotailed=TRUE)
cor.test.between
cor.test.between = paired.r(-0.178045 , -0.1698871, n=45, n2=47, twotailed=TRUE)
cor.test.between
train.cor = get.cors(data[data$grp=="train", ], iv = "lipl_to_lput", dv = "Sum_Diff", method="spearman")
ctrl.cor = get.cors(data[data$grp=="control", ], iv = "lipl_to_lput", dv = "Sum_Diff", method="spearman")
cor.test.between = paired.r(-0.178045 , -0.1698871, n=45, n2=47, twotailed=TRUE)
cor.test.between
install.packages("lsmeans")
library(lsmeans)
install.packages(emmeans)
install.packages("emmeans")
library(emmeans)
? emmeans
wesanderson::wes_palette("Chevalier1")
wesanderson::wes_palette("Chevalier")
wesanderson::wes_palette("Chevalier")[1]
wesanderson::wes_palette("Chevalier")[2]
wesanderson::wes_palette("Chevalier")[3]
wesanderson::wes_palette("Chevalier")[3]
wesanderson::wes_palette("Chevalier")
wesanderson::wes_palette("Chevalier")[4]
wesanderson::wes_palette("Royal1")
wesanderson::wes_palette("Royal1")[1]
wesanderson::wes_palette("Royal1")[2]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
get.b.data <- function(fname){
dat <- read.csv(fname, header = TRUE)
dat$sub = as.factor(dat$sub)
dat$grp = as.factor(dat$grp)
levels(dat$grp) = c("train", "control")
# assign parameter name
dat$con = rep(c("lipl_to_lput", "lput_to_lipl", "lput_to_smfc", "smfc_to_lipl", "smfc_to_lput"), times = length(levels(dat$sub)))
dat$con = as.factor(dat$con)
dat
}
fname = "~/Dropbox/QBI/mult-conn/multi-practice-repository/s1_multitask_network_dcm_analysis_outdata/behav_correlations/sub_b_params.csv"
params = get.b.data(fname)
get.behav.data <- function(fname){
# this function assumes that the behavioural data is stored in the below folder
behav.dat        <- read.csv(fname)
behav.dat$sub    <- as.factor(behav.dat$sub)
behav.dat$Group  <- as.factor(behav.dat$Group)
levels(behav.dat$Group) <- c("train","control")
behav.dat = behav.dat[,c(1:6, 21:22, 25, 30)]
behav.dat
}
behav.dat = get.behav.data('../s1s2_behavioural_data/final_data_cleaned_250ms_to_3_sdevs_1331_recode.csv')
data = inner_join(params, behav.dat, by=c("sub"))
#### basic plot function to plot rts by parameter
draw.scatters <- function(data, dv){
# enter the dataframe and the behavioural DV of choice to yield scatter plot of b_param by    dv
scat = ggplot(data, aes_string(x="b", y=dv, col="con")) +
geom_point() +
facet_wrap(~con) +
geom_smooth(method=lm) +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values=wesanderson::wes_palette("Rushmore"))
scat
}
get.cors <- function(data, iv, dv, method){
# pass in data frame, iv, dv, and method as tests to get outputs
x = data$b[data$con == iv]
y = data[data$con == iv, dv]
test = cor.test(x, y, method=method)
test
}
draw.scatters(data, "Pre_VS")
lapply(unique(data$con), get.cors, data = data, dv = "Pre_VS", method="spearman")
draw.scatters(data, "Pre_AS")
lapply(unique(data$con), get.cors, data = data, dv = "Pre_AS", method="spearman")
draw.scatters(data, "Pre_VM")
lapply(unique(data$con), get.cors, data = data, dv = "Pre_VM", method="spearman")
draw.scatters(data, "Pre_AM")
lapply(unique(data$con), get.cors, data = data, dv = "Pre_AM", method="spearman")
draw.scatters(data, "Pre_VM_DC")
lapply(unique(data$con), get.cors, data = data, dv = "Pre_VM_DC", method="spearman")
draw.scatters(data, "Pre_AM_DC")
lapply(unique(data$con), get.cors, data = data, dv = "Pre_AM_DC", method="spearman")
draw.scatters(data, "Pre_DC_Mean")
lapply(unique(data$con), get.cors, data = data, dv = "Pre_DC_Mean", method="spearman")
draw.scatters(data, "Pre_Sum_DC")
lapply(unique(data$con), get.cors, data = data, dv = "Pre_Sum_DC", method="spearman")
? generalTestBF
? lmBF
? `BFBayesFactor-class`
? 'BFmodel'
? 'BFmodel-class'
rm(list = ls())
library(wesanderson)
library(cowplot)
library(ggplot2)
library(plyr)
library(dplyr)
#setwd("~/Dropbox/BHAMPROJECTS/RelValue_StudyProgramme/Analysis/EXP_3_CUE_PROB_OUT/exp3")
load("EXP1/ANALYSIS/EXP1_ANALYSIS_MIXDMDLS_BIAS.R")
setwd("~/Dropbox/BHAMPROJECTS/RelValue_StudyProgramme/PROJECT_REPOSITORIES/PROJ1_DISTSELMECH")
#setwd("~/Dropbox/BHAMPROJECTS/RelValue_StudyProgramme/Analysis/EXP_3_CUE_PROB_OUT/exp3")
load("EXP1/ANALYSIS/EXP1_ANALYSIS_MIXDMDLS_BIAS.R")
eb_length = .1
c0 = -(.5*log2(.5))-(.5*log2(.5)) # defined according to Prinzmetal et al, 2015, JEP:HPP
xs = c( - .98*log2(.98)  - .02*log2(.02) ,
- .92*log2(.92)  - .08*log2(.08) ,
-  .9*log2(.9)   -  .1*log2(.1) ,
-  .8*log2(.8)   -  .2*log2(.2) ,
-  .6*log2(.6)   -  .4*log2(.4)  )
xs = c0 - xs
####### PLOT USING GGPLOT2
figxs = rep(xs, each = 4)
sum.dat.all.plot$xs = figxs
sum.dat.win.se = ddply( sum.dat.err, .(value, fixprob, valid), summarise,
se = sd(mu)/sqrt(length(mu)))
sum.dat.all.plot = inner_join(sum.dat.all.plot, sum.dat.win.se, by=c("value", "fixprob", "valid"))
l_wd = 1
f_size=8
alph = 0.5
this.legend.title = "Value"
rt.plot <- ggplot(sum.dat.all.plot, aes(x=xs, y=mean, color=as.factor(r1))) +
ylim(0.5,0.9) +
geom_point(size=1.5) + geom_errorbar(aes(x=xs, ymin=mean-se, ymax=mean+se)) +
geom_line(aes(x=xs, y=predict, color=as.factor(r1)), linetype=2, lwd=l_wd, alpha=alph) +
ylab("RT") + xlab("Spatial Certainty (bits)") +
facet_wrap(~valid) +
scale_color_manual(this.legend.title, values=c(wes_palette("Royal1")[1], wes_palette("Royal1")[2]),
guide=guide_legend(direction = "horizontal")) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(size=f_size),
axis.text.x = element_text(size=f_size),
axis.text.y = element_text(size=f_size),
legend.position=c(0.05, 0.8))
rt.plot
ggplot(sum.dat.all.plot, aes(x=xs, y=mean, color=as.factor(r1))) +
ylim(0.5,0.9) +
geom_point(size=1.5) + geom_errorbar(aes(x=xs, ymin=mean-se, ymax=mean+se)) +
geom_line(aes(x=xs, y=predict, color=as.factor(r1)), linetype=3, lwd=l_wd, alpha=alph) +
ylab("RT") + xlab("Spatial Certainty (bits)") +
facet_wrap(~valid) +
scale_color_manual(this.legend.title, values=c(wes_palette("Royal1")[1], wes_palette("Royal1")[2]),
guide=guide_legend(direction = "horizontal")) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(size=f_size),
axis.text.x = element_text(size=f_size),
axis.text.y = element_text(size=f_size),
legend.position=c(0.05, 0.8))
rt.plot <- ggplot(sum.dat.all.plot, aes(x=xs, y=mean, color=as.factor(r1))) +
ylim(0.5,0.9) +
geom_point(size=1.5) + geom_errorbar(aes(x=xs, ymin=mean-se, ymax=mean+se)) +
geom_line(aes(x=xs, y=predict, color=as.factor(r1)), linetype=3, lwd=l_wd, alpha=alph) +
ylab("RT") + xlab("Spatial Certainty (bits)") +
facet_wrap(~valid) +
scale_color_manual(this.legend.title, values=c(wes_palette("Royal1")[1], wes_palette("Royal1")[2]),
guide=guide_legend(direction = "horizontal")) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(size=f_size),
axis.text.x = element_text(size=f_size),
axis.text.y = element_text(size=f_size),
legend.position=c(0.05, 0.8))
ggsave("e1_rt_data.bmp", plot=rt.plot, width=10, height=5, units="cm")
rt.plot <- ggplot(sum.dat.all.plot, aes(x=xs, y=mean, color=as.factor(r1))) +
ylim(0.5,0.9) +
geom_point(size=1.5) + geom_errorbar(aes(x=xs, ymin=mean-se, ymax=mean+se)) +
geom_line(aes(x=xs, y=predict, color=as.factor(r1)), linetype=1, lwd=l_wd, alpha=alph) +
ylab("RT") + xlab("Spatial Certainty (bits)") +
facet_wrap(~valid) +
scale_color_manual(this.legend.title, values=c(wes_palette("Royal1")[1], wes_palette("Royal1")[2]),
guide=guide_legend(direction = "horizontal")) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(size=f_size),
axis.text.x = element_text(size=f_size),
axis.text.y = element_text(size=f_size),
legend.position=c(0.05, 0.8))
ggsave("e1_rt_data.bmp", plot=rt.plot, width=10, height=5, units="cm")
acc.dat.win.err = ddply( acc.dat.err, .(value, fixprob, valid), summarise,
se = sd(acc)/sqrt(length(acc)))
acc.dat.plot = inner_join(acc.dat.plot, acc.dat.win.err, by=c("value", "fixprob", "valid"))
acc.dat.plot$xs = figxs
acc.plot <- ggplot(acc.dat.plot, aes(x=xs, y=acc, color=as.factor(r1))) +
ylim(0.5,1) +
geom_point(size=1.5) + geom_errorbar(aes(x=xs, ymin=acc-se, ymax=acc+se)) +
geom_line(aes(x=xs, y=predict, color=as.factor(r1)), linetype=1, lwd=l_wd, alpha=alph) +
ylab("Acc") + xlab("Spatial Certainty (bits)") +
facet_wrap(~valid) +
scale_color_manual(this.legend.title, values=c(wes_palette("Royal1")[1], wes_palette("Royal1")[2])) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(size=f_size),
axis.text.x = element_text(size=f_size),
axis.text.y = element_text(size=f_size),
legend.position="none")
ggsave("e1_acc_data.bmp", plot=acc.plot, width=10, height=5, units="cm")
rm(list = ls())
# manual instructions
# 1. SETWD TO SOURCE FILE LOCATION
# 2. run code @ bottom that defines plot.dvs function
load("EXP2/ANALYSIS/EXP2_ANALYSIS_MIXDMDLS_BIAS.R")
eb_length = .1
c0 = -(.5*log2(.5))-(.5*log2(.5))
xs = c(-  .6*log2(.6)  -  .4*log2(.4),
-  .8*log2(.8)  -  .2*log2(.2) )
xs = c0 - xs
####### PLOT USING GGPLOT2
figxs = rep(xs, each = 8)
sum.dat.all.plot$xs = figxs
# get 1 std error of the mean for plotting the error bars
# decided against the 95% within subject confidence intervals as would have to do one
# for each comparison
sum.dat.win.se = ddply( sum.dat.err, .(value, fixprob, valid, rew_cond), summarise,
se = sd(mu)/sqrt(length(mu)))
sum.dat.all.plot = inner_join(sum.dat.all.plot, sum.dat.win.se, by=c("value", "fixprob", "valid", "rew_cond"))
l_wd = 1
f_size=8
alph = 0.5
this.legend.title = "Value"
rt.plot <- ggplot(sum.dat.all.plot, aes(x=xs, y=mean, color=as.factor(r1*100))) +
ylim(0.5,0.8) +
geom_point(size=1.5) + geom_errorbar(aes(x=xs, ymin=mean-se, ymax=mean+se), width = 0.1, size=0.5) +
geom_line(aes(x=xs, y=predict, color=as.factor(r1*100)), linetype=1, lwd=l_wd, alpha=alph) +
ylab("RT") + xlab("Spatial Certainty (bits)") +
facet_wrap(~rew_cond*valid, nrow=1) +
scale_color_manual(this.legend.title, values=c(wes_palette("Royal1")[1], wes_palette("Royal1")[2]),
guide=guide_legend(direction = "horizontal")) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(size=f_size),
axis.text.x = element_text(size=f_size),
axis.text.y = element_text(size=f_size),
legend.position=c(0.01, 0.1))
ggsave("e2_rt_data.bmp", plot=rt.plot, width=12, height=6, units="cm")
acc.dat.win.err = ddply( acc.dat.err, .(value, fixprob, valid, rew_cond), summarise,
se = sd(acc)/sqrt(length(acc)))
acc.dat.plot = inner_join(acc.dat.plot, acc.dat.win.err, by=c("value", "fixprob", "valid", "rew_cond"))
acc.dat.plot$xs = figxs
acc.plot <- ggplot(acc.dat.plot, aes(x=xs, y=acc, color=as.factor(r1*100))) +
ylim(0.65,1) +
geom_point(size=1.5) + geom_errorbar(aes(x=xs, ymin=acc-se, ymax=acc+se), width = 0.1, size=0.5) +
geom_line(aes(x=xs, y=predict, color=as.factor(r1*100)), linetype=1, lwd=l_wd, alpha=alph) +
ylab("Acc") + xlab("Spatial Certainty (bits)") +
facet_wrap(~rew_cond*valid, nrow=1) +
scale_color_manual(this.legend.title, values=c(wes_palette("Royal1")[1], wes_palette("Royal1")[2]),
guide=guide_legend(direction = "horizontal")) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(size=f_size),
axis.text.x = element_text(size=f_size),
axis.text.y = element_text(size=f_size),
legend.position=c(0.01, 0.1))
ggsave("e2_acc_data.bmp", plot=acc.plot, width=12, height=6, units="cm")
rm(list=ls())
library(wesanderson)
library(lm.beta)
library(lme4)
library(BayesFactor)
library(plyr)
# EXP 2
# IS AN ADDITIVE OR AN INTERACTIVE MODEL BETTER TO ACCOUNT FOR DATA?
# set to current directory
##### trim functions - remove RTs 2.5 standard deviations above and below the mean
source("EXP2/ANALYSIS/trim_functions.R")
# NOTE: this loads the workspace that has the outputs that this code was written to
# produce using the dataset commented out below.
# load("EXP2/ANALYSIS/exp2_clean_BS_v1_28_02_17")
load("EXP2/ANALYSIS/EXP2_ANALYSIS_MIXDMDLS_BIAS.R")
acc.report
# accuracy model to report values in paper
acc.report = lmer( acc ~ valid*info_gain + rew_cond + r1 + (1|sub), REML = FALSE, data = acc.dat.all)
acc.report
summary(acc.report)
