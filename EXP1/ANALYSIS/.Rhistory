c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
raw_H = c(c1, c2, c3, c4, c5)
rel_val_high = 50/51
rel_val_low = 1/51
c1 = -(.6*log2(1/.6)-(.4*log2(1/.4))
c1 = -(.6*log2(1/.6))-(.4*log2(1/.4))
c1
c2 = -(.8*log2(1/.8))-(.2*log2(1/.2))
c2
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
raw_H = c(c1, c2, c3, c4, c5)
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_add_highvalid
H_add_lowvalid
plot(raw_H, type = "l", lty = 1)
points(H_add_highvalid, type = "l", lty = 2, col = "red")
points(H_add_lowvalid, type = "l", lty = 2, col = "grey")
plot(raw_H, type = "l", lty = 1, ylim = c(-1, 3))
points(H_add_highvalid, type = "l", lty = 2, col = "red")
points(H_add_lowvalid, type = "l", lty = 2, col = "grey")
H_rel_lowhvalid = raw_H * (1-rel_val_low)
plot(raw_H, type = "l", lty = 1, ylim = c(-1, 3))
points(H_rel_highvalid, type = "l", lty = 2, col = "red")
points(H_rel_lowvalid, type = "l", lty = 2, col = "grey")
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowhvalid = raw_H * (1-rel_val_low)
plot(raw_H, type = "l", lty = 1, ylim = c(-1, 3))
points(H_rel_highvalid, type = "l", lty = 2, col = "red")
points(H_rel_lowvalid, type = "l", lty = 2, col = "grey")
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2)
val = rep(c("high", "low"), each = 5))
rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2)
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
#### simulations - cueing effects predicted by shannon's entropy (+ value or * value)
# conditions = (60:40, 80:20, 90:10, 92:08, 96:04)
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = c(c1, c2, c3, c4, c5)
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowhvalid = raw_H * (1-rel_val_low)
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
H_rel_lowvalid = raw_H * (1-rel_val_low)
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
plot(raw_H, type = "l", lty = 1, ylim = c(-0.1, 1.2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], lty = 2, col = "grey")
tmp$add[tmp$val == "low"]
rm(list-ls())
rm(list=ls())
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = c(c1, c2, c3, c4, c5)
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowvalid = raw_H * (1-rel_val_low)
# make dataframe
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
tmp$add = (max(tmp$add) - tmp$add)/(max(tmp$add) - min(tmp$add))
tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
plot(raw_H, type = "l", lty = 1, ylim = c(-0.1, 1.2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], lty = 2, col = "grey")
rm(list = ls())
# conditions = (60:40, 80:20, 90:10, 92:08, 96:04)
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = gains
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowvalid = raw_H * (1-rel_val_low)
# make dataframe
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
tmp$add = (max(tmp$add) - tmp$add)/(max(tmp$add) - min(tmp$add))
tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
plot(raw_H, type = "l", lty = 1, ylim = c(-0.1, 1.2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], lty = 2, col = "grey")
plot(tmp$cue, raw_H, type = "l", lty = 1, ylim = c(-0.1, 1.2))
#### simulations - cueing effects predicted by shannon's entropy (+ value or * value)
rm(list = ls())
# conditions = (60:40, 80:20, 90:10, 92:08, 96:04)
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = gains
gains
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_highvalid
#### simulations - cueing effects predicted by shannon's entropy (+ value or * value)
rm(list = ls())
# conditions = (60:40, 80:20, 90:10, 92:08, 96:04)
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = gains
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowvalid = raw_H * (1-rel_val_low)
# make dataframe
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
base = c(gains, gains)
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
tmp$add = (max(tmp$add) - tmp$add)/(max(tmp$add) - min(tmp$add))
tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
plot(tmp$base, raw_H, type = "l", lty = 1, ylim = c(-0.1, 1.2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], lty = 2, col = "grey")
rm(list = ls())
# conditions = (60:40, 80:20, 90:10, 92:08, 96:04)
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = gains
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowvalid = raw_H * (1-rel_val_low)
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
base = c(raw_H, raw_H)
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
base = c(raw_H, raw_H),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
tmp$add = (max(tmp$add) - tmp$add)/(max(tmp$add) - min(tmp$add))
tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
plot(tmp$base, raw_H, type = "l", lty = 1, ylim = c(-0.1, 1.2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], lty = 2, col = "grey")
par(mfrow = c(1,2))
plot(tmp$base, raw_H, type = "l", lty = 1, ylim = c(-0.1, 1.2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], type = "l", lty = 2, col = "grey")
par(mfrow = c(1,2))
plot(tmp$base,type = "l", lty = 1, ylim = c(-0.1, 1.2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], type = "l", lty = 2, col = "grey")
#### simulations - cueing effects predicted by shannon's entropy (+ value or * value)
rm(list = ls())
# conditions = (60:40, 80:20, 90:10, 92:08, 96:04)
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = gains
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowvalid = raw_H * (1-rel_val_low)
# make dataframe
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
base = c(raw_H, raw_H),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
tmp$add = (max(tmp$add) - tmp$add)/(max(tmp$add) - min(tmp$add))
tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
par(mfrow = c(1,2))
plot(tmp$base[tmp$val == "high"], type = "l", lty = 1, ylim = c(-0.1, 1.2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], type = "l", lty = 2, col = "grey")
raw_H
tmp$vase[1:5]
tmp$base[1:5]
tmp$base[tmp$val == "high"]
#### simulations - cueing effects predicted by shannon's entropy (+ value or * value)
rm(list = ls())
# conditions = (60:40, 80:20, 90:10, 92:08, 96:04)
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = gains
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowvalid = raw_H * (1-rel_val_low)
# make dataframe
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
base = c(raw_H, raw_H),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
tmp$add = (max(tmp$add) - tmp$add)/(max(tmp$add) - min(tmp$add))
tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
par(mfrow = c(1,2))
plot(tmp$base[tmp$val == "high"], type = "l", lty = 1, ylim = c(-0.1, 1.2))
tmp$base
#### simulations - cueing effects predicted by shannon's entropy (+ value or * value)
rm(list = ls())
# conditions = (60:40, 80:20, 90:10, 92:08, 96:04)
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = gains
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowvalid = raw_H * (1-rel_val_low)
# make dataframe
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
base = c(raw_H, raw_H),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
tmp$base = (max(tmp$base) - tmp$base)/(max(tmp$base) - min(tmp$base))
tmp$add = (max(tmp$add) - tmp$add)/(max(tmp$add) - min(tmp$add))
tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
par(mfrow = c(1,2))
plot(tmp$base[tmp$val == "high"], type = "l", lty = 1, ylim = c(-0.1, 1.2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], type = "l", lty = 2, col = "grey")
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
base = c(raw_H, raw_H),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
# tmp$base = (max(tmp$base) - tmp$base)/(max(tmp$base) - min(tmp$base))
# tmp$add = (max(tmp$add) - tmp$add)/(max(tmp$add) - min(tmp$add))
# tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
par(mfrow = c(1,2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], type = "l", lty = 2, col = "grey")
rm(list = ls())
# conditions = (60:40, 80:20, 90:10, 92:08, 96:04)
neutral = -(.5*log2(.5))-(.5*log(.5))
c1 = -(.6*log2(.6))-(.4*log2(.4))
c2 = -(.8*log2(.8))-(.2*log2(.2))
c3 = -(.9*log2(.9))-(.1*log2(.1))
c4 = -(.92*log2(.92))-(.08*log2(.08))
c5 = -(.96*log2(.96))-(.04*log2(.04))
gains = c(neutral-c1,
neutral-c2,
neutral-c3,
neutral-c4,
neutral-c5
)
rel_val_high = 50/51
rel_val_low = 1/51
raw_H = gains
H_add_highvalid = raw_H + (1-rel_val_high)
H_add_lowvalid = raw_H + (1-rel_val_low)
H_rel_highvalid = raw_H * (1-rel_val_high)
H_rel_lowvalid = raw_H * (1-rel_val_low)
# make dataframe
tmp = data.frame(add = c(H_add_highvalid, H_add_lowvalid),
rel = c(H_rel_highvalid, H_rel_lowvalid),
base = c(raw_H, raw_H),
cue = rep(c(".6.4", ".8.2", ".9.1", ".92.08", ".94.06"), times = 2),
val = rep(c("high", "low"), each = 5))
# tmp$base = (max(tmp$base) - tmp$base)/(max(tmp$base) - min(tmp$base))
# tmp$add = (max(tmp$add) - tmp$add)/(max(tmp$add) - min(tmp$add))
# tmp$rel = (max(tmp$rel) - tmp$rel)/(max(tmp$rel) - min(tmp$rel))
par(mfrow = c(1,2))
points(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], type = "l", lty = 2, col = "grey")
plot(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red")
points(tmp$add[tmp$val == "low"], type = "l", lty = 2, col = "grey")
plot(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red", ylim = c(min(c(tmp$add), max(c(tmp$add)))))
plot(tmp$add[tmp$val == "high"], type = "l", lty = 2, col = "red", ylim = c(min(tmp$add), max(tmp$add)))
points(tmp$add[tmp$val == "low"], type = "l", lty = 2, col = "grey")
plot(tmp$rel[tmp$val == "high"], type = "l", lty = 2, col = "red", ylim = c(min(tmp$rel), max(tmp$rel)))
points(tmp$rel[tmp$val == "low"], type = "l", lty = 2, col = "grey")
cor.test(tmp$add, tmp$rel)
knitr::opts_chunk$set(fig.width = 10, fig.height = 6,
echo = TRUE, highlight = TRUE)
setwd("~/Dropbox/BHAMPROJECTS/RelValue_StudyProgramme/PROJECT_REPOSITORIES/ADDBIAS_REPOS/EXP1/ANALYSIS")
source("clean_funcs.r")
source("trim_functions.R")
source("notepad-load_data.r")
source("clean_funcs.r")
source("trim_functions.R")
source("notepad-load_data.r")
rows = array()
rows$sub = levels(dat$sub) # start dataframe for row numbers
source("clean_funcs.r")
source("trim_functions.R")
source("notepad-load_data.r")
rows = array()
rows$sub = levels(dat$sub) # start dataframe for row numbers
rem.learnc.dat <- function(data, rows){
n_row = rows$num[rows$sub == data$sub[1]]
data = data[c(n_row:length(data$RT)), ]
}
tmp = by(dat, dat$sub, rem.learnc.dat, rows)
switch.rows = array()
switch.rows$sub = levels(dat$sub)
switch.rows$num[switch.rows$sub == "301"] = clean.out.block.switches(dat[dat$sub == "301",], 100)
switch.rows$num[switch.rows$sub == "302"] = clean.out.block.switches(dat[dat$sub == "302",], 85)
switch.rows$num[switch.rows$sub == "303"] = clean.out.block.switches(dat[dat$sub == "303",],85)
switch.rows$num[switch.rows$sub == "304"] = clean.out.block.switches(dat[dat$sub == "304",], 95)
switch.rows$num[switch.rows$sub == "305"] = clean.out.block.switches(dat[dat$sub == "305",],80)
switch.rows$num[switch.rows$sub == "306"] = clean.out.block.switches(dat[dat$sub == "306",],85)
switch.rows$num[switch.rows$sub == "307"] = clean.out.block.switches(dat[dat$sub == "307",],90)
switch.rows$num[switch.rows$sub == "308"] = clean.out.block.switches(dat[dat$sub == "308",],90)
switch.rows$num[switch.rows$sub == "309"] = clean.out.block.switches(dat[dat$sub == "309",],90)
switch.rows$num[switch.rows$sub == "310"] = clean.out.block.switches(dat[dat$sub == "310",],85)
switch.rows$num[switch.rows$sub == "311"] = clean.out.block.switches(dat[dat$sub == "311",],80)
switch.rows$num[switch.rows$sub == "312"] = clean.out.block.switches(dat[dat$sub == "312",],90)
switch.rows$num[switch.rows$sub == "313"] = clean.out.block.switches(dat[dat$sub == "313",],90)
switch.rows$num[switch.rows$sub == "314"] = clean.out.block.switches(dat[dat$sub == "314",],90)
switch.rows$num[switch.rows$sub == "315"] = clean.out.block.switches(dat[dat$sub == "315",],90)
switch.rows$num[switch.rows$sub == "316"] = clean.out.block.switches(dat[dat$sub == "316",],90)
switch.rows$num[switch.rows$sub == "317"] = clean.out.block.switches(dat[dat$sub == "317",],90)
switch.rows$num[switch.rows$sub == "318"] = clean.out.block.switches(dat[dat$sub == "318",],90)
switch.rows$num[switch.rows$sub == "320"] = clean.out.block.switches(dat[dat$sub == "320",],75)
switch.rows$num[switch.rows$sub == "321"] = clean.out.block.switches(dat[dat$sub == "321",],90)
switch.rows$num[switch.rows$sub == "323"] = clean.out.block.switches(dat[dat$sub == "323",],90)
rem.post.switch <- function(data, rows){
n_row = rows$num[rows$sub == data$sub[1]]
trials = length(data$sub)
mark.trials = array(data=0, dim=trials)
for (x in 2:(trials - 25)){
if (data$fixprob[x-1] != data$fixprob[x]){
trials_rem = which(data$resp[c(x:(x+50))] == data$cor_resp[c(x:(x+50))])
trials_rem = trials_rem[n_row]
mark.trials[c(x:(x+trials_rem-1))] = 1
}}
data$mark = mark.trials
data = data[data$mark < 1, ]
return(data)
}
tmp = by(dat, dat$sub, rem.post.switch, switch.rows)
dat = as.data.frame(do.call(rbind, tmp))
rm(tmp)
warnings()
knitr::opts_chunk$set(fig.width = 10, fig.height = 6,
echo = TRUE, highlight = TRUE,
root.dir = "~/Dropbox/BHAMPROJECTS/RelValue_StudyProgramme/PROJECT_REPOSITORIES/ADDBIAS_REPOS/EXP1/ANALYSIS")
knitr::opts_chunk$set(echo = TRUE, highlight = TRUE,
root.dir = "~/Dropbox/BHAMPROJECTS/RelValue_StudyProgramme/PROJECT_REPOSITORIES/ADDBIAS_REPOS/EXP1/ANALYSIS")
library(c(plyr, wesanderson))
library(wesanderson)
library(lm.beta)
library(lme4)
library(BayesFactor)
library(plyr)
load("exp3_clean_BS_fv_18_03_17.R")
data = dat
data = data[data$cor_resp == data$resp, ]
data = na.omit(data)
tmp <- by(data.frame(rt=data$RT, sub=data$sub, fixprob=data$fixprob,
value=data$value, valid=data$valid, cresp=data$cor_resp),
list(data$loc_prob, data$value, data$session), trim) # remove RTs > or < 2.5 stdevs from the mu
data = as.data.frame(do.call(rbind, tmp))
rm(tmp)
data$prob[data$fixprob == "98:02" & data$valid == "valid"] = .98
data$prob[data$fixprob == "98:02" & data$valid == "invalid"] = .02
data$prob[data$fixprob == "94:06" & data$valid == "valid"] = .94
data$prob[data$fixprob == "94:06" & data$valid == "invalid"] = .06
data$prob[data$fixprob == "90:10" & data$valid == "valid"] = .9
data$prob[data$fixprob == "90:10" & data$valid == "invalid"] = .1
data$prob[data$fixprob == "80:20" & data$valid == "valid"] = .8
data$prob[data$fixprob == "80:20" & data$valid == "invalid"] = .2
data$prob[data$fixprob == "60:40" & data$valid == "valid"] = .6
data$prob[data$fixprob == "60:40" & data$valid == "invalid"] = .4
data$val_num[data$value == "high"] = 50
data$val_num[data$value == "low"] = 1
data$rel_num_comp[data$value == "high"] = 1
data$rel_num_comp[data$value == "low"] = 50
data$cue[data$valid == "valid" & data$value == "high"] = "h2l"
data$cue[data$valid == "invalid" & data$value == "low"] = "h2l"
data$cue[data$valid == "valid" & data$value == "low"] = "l2h"
data$cue[data$valid == "invalid" & data$value == "high"] = "l2h"
